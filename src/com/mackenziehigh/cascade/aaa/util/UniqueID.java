package com.mackenziehigh.cascade.aaa.util;

import com.google.common.primitives.Longs;
import com.mackenziehigh.sexpr.SAtom;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.UUID;

/**
 * An instance of this class is a unique identifier.
 *
 * <p>
 * The scope of the uniqueness is use-case specific.
 * In other words, some instances of of this class
 * may represent globally-unique identifies,
 * while others represent locally-unique identifiers.
 * </p>
 */
public final class UniqueID
{
    private final byte[] bytes;

    /**
     * Sole Constructor.
     *
     * @param bytes are the underlying bytes (MSB to LSB).
     */
    private UniqueID (final byte[] bytes)
    {
        this.bytes = bytes;
    }

    /**
     * This is the fixed number of bytes in this unique-identifier.
     *
     * @return the length, in bytes, of this identifier.
     */
    public int length ()
    {
        return bytes.length;
    }

    /**
     * This method converts this identifier to a byte-array.
     *
     * @return the underlying bytes (MSB to LSB).
     */
    public byte[] toByteArray ()
    {
        return Arrays.copyOf(bytes, 0);
    }

    /**
     * This method converts this identifier to a numeric form.
     *
     * @return this identifier in numeric form.
     */
    public BigInteger toBigInteger ()
    {
        final BigInteger result = new BigInteger(bytes);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode ()
    {
        final int hash = 67 * Arrays.hashCode(bytes);
        return hash;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals (final Object obj)
    {
        if (this == obj)
        {
            return true;
        }
        if (obj == null)
        {
            return false;
        }
        if (getClass() != obj.getClass())
        {
            return false;
        }
        final UniqueID other = (UniqueID) obj;
        return Arrays.equals(this.bytes, other.bytes);
    }

    /**
     * This method converts this identifier to a hex string.
     *
     * @return this identifier as a hex string (MSB to LSB).
     */
    @Override
    public String toString ()
    {
        return new SAtom(bytes).toString();
    }

    /**
     * This method generates a new globally-unique
     * identifier based upon a UUID generated by Java.
     *
     * @return the new identifier.
     */
    public static UniqueID random ()
    {
        final long upper = UUID.randomUUID().getMostSignificantBits();
        final long lower = UUID.randomUUID().getLeastSignificantBits();
        final UniqueID prefix = fromBytes(upper);
        final UniqueID suffix = fromBytes(lower);
        final UniqueID result = combine(prefix, suffix);
        return result;
    }

    /**
     * This method combines two identifiers into one.
     *
     * <p>
     * If at least one of the identifiers is globally-unique,
     * then the result will also be globally unique.
     * </p>
     *
     * @param prefix will provide the most-significant bytes.
     * @param suffix will provide the least-significant bytes.
     * @return the combination of the two identifiers.
     */
    public static UniqueID combine (final UniqueID prefix,
                                    final UniqueID suffix)
    {
        final int length = prefix.length() + suffix.length();
        final byte[] array = new byte[length];
        System.arraycopy(prefix.bytes, 0, array, 0, prefix.bytes.length);
        System.arraycopy(suffix.bytes, 0, array, prefix.bytes.length, suffix.bytes.length);
        final UniqueID result = fromBytes(array);
        return result;
    }

    /**
     * This method converts the binary representation
     * of an identifier to its object representation.
     *
     * @param bytes are the underlying bytes (MSB to LSB).
     * @return a identifier equivalent to the given bytes.
     */
    public static UniqueID fromBytes (final byte[] bytes)
    {
        final byte[] copy = Arrays.copyOf(bytes, bytes.length);
        final UniqueID result = new UniqueID(copy);
        return result;
    }

    /**
     * This method creates a new identifier from the eight
     * bytes that make up a long integer.
     *
     *
     * <p>
     * This method is useful for creating locally-unique identifers.
     * </p>
     *
     * @param bytes provides the eight bytes.
     * @return a new identifier based on the given bytes.
     */
    public static UniqueID fromBytes (final long bytes)
    {
        final byte[] array = Longs.toByteArray(bytes);
        final UniqueID result = new UniqueID(array);
        return result;
    }
}
